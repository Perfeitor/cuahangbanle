// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cuahangbanle.Data;

#nullable disable

namespace cuahangbanle.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240926114406_fixDsMathang")]
    partial class fixDsMathang
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.Donhang", b =>
                {
                    b.Property<string>("Madonhang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Kieudonhang")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Ngaytao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nguoitao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Tienhang")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Tientralai")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Madonhang");

                    b.ToTable("Donhang");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.Donvitinh", b =>
                {
                    b.Property<string>("Madonvitinh")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Donvile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Donvilon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Madonvitinh");

                    b.ToTable("Donvitinh");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.DsMatHang", b =>
                {
                    b.Property<string>("Madonhang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mamathang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Soluong")
                        .HasColumnType("int");

                    b.HasKey("Madonhang", "Mamathang");

                    b.HasIndex("Mamathang");

                    b.ToTable("DsMatHang");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.Mathang", b =>
                {
                    b.Property<string>("Mamathang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Giaban")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Gianhap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaNCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Madonvitinh")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Manganhhang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Manhomhang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Phantramlai")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenNCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tensanpham")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tienlai")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tonkho")
                        .HasColumnType("int");

                    b.HasKey("Mamathang");

                    b.HasIndex("MaNCC");

                    b.HasIndex("Madonvitinh");

                    b.HasIndex("Manganhhang");

                    b.HasIndex("Manhomhang");

                    b.ToTable("Mathang");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.Nganhhang", b =>
                {
                    b.Property<string>("Manganhhang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Ngaysua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ngaytao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nguoisua")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nguoitao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tennganghang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Manganhhang");

                    b.ToTable("Nganhhang");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.Nhacungcap", b =>
                {
                    b.Property<string>("MaNCC")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diachi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dienthoai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ngaysua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ngaytao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nguoisua")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nguoitao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenNCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaNCC");

                    b.ToTable("Nhacungcap");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.UserProfile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hoten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manguoisua")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ngaysua")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("cuahangbanle.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("cuahangbanle.Data.Models.Nhomhang", b =>
                {
                    b.Property<string>("Manhomhang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Ngaysua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ngaytao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nguoisua")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nguoitao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tennhomhang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Manhomhang");

                    b.ToTable("Nhomhang");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("cuahangbanle.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("cuahangbanle.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cuahangbanle.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("cuahangbanle.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.DsMatHang", b =>
                {
                    b.HasOne("cuahangbanle.DBData.Models.Donhang", "Donhang")
                        .WithMany()
                        .HasForeignKey("Madonhang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cuahangbanle.DBData.Models.Mathang", "Mathang")
                        .WithMany()
                        .HasForeignKey("Mamathang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donhang");

                    b.Navigation("Mathang");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.Mathang", b =>
                {
                    b.HasOne("cuahangbanle.DBData.Models.Nhacungcap", "Nhacungcap")
                        .WithMany()
                        .HasForeignKey("MaNCC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cuahangbanle.DBData.Models.Donvitinh", "Donvitinh")
                        .WithMany()
                        .HasForeignKey("Madonvitinh")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cuahangbanle.DBData.Models.Nganhhang", "Nganhhang")
                        .WithMany()
                        .HasForeignKey("Manganhhang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cuahangbanle.Data.Models.Nhomhang", "Nhomhang")
                        .WithMany()
                        .HasForeignKey("Manhomhang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donvitinh");

                    b.Navigation("Nganhhang");

                    b.Navigation("Nhacungcap");

                    b.Navigation("Nhomhang");
                });

            modelBuilder.Entity("cuahangbanle.DBData.Models.UserProfile", b =>
                {
                    b.HasOne("cuahangbanle.Data.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("cuahangbanle.DBData.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
