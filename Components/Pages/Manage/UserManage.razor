@page "/Admin/UserManage"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using cuahangbanle.Components.Dialogs
@using cuahangbanle.Components.Services
@using cuahangbanle.DBData.Models
@using cuahangbanle.Data

@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<ApplicationUser> _userManager
@inject IUserService userService
@inject IUserProfileService userProfileService
@inject NavigationManager navigate
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Quản lý Người dùng</PageTitle>

<MudTable Items="@userFullInfoList">
    <HeaderContent>
        <MudTh>Email</MudTh>
        <MudTh>Tên người dùng</MudTh>
        <MudTh>Quyền</MudTh>
        <MudTh>Quản lý</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@(context.User.Email ?? "")</MudTd>
        <MudTd>@(context.Profile.Hoten ?? "")</MudTd>
        <MudTd>@RoleListString(context.Roles)</MudTd>
        <MudTd>
            <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" />
                </ActivatorContent>
                <ChildContent>
                    <MudNavMenu>
                        @if (!isAdmin(context))
                        {
                            <MudNavLink>
                                <MudButton Disabled="@isDisable" OnClick="@(() => NavigateToUserDetail(context.Profile.ProfileId.ToString()))">Xem chi tiết</MudButton>
                            </MudNavLink>
                            <MudNavLink>
                                <MudButton Disabled="@isDisable" OnClick="@(() => DeleteAccount(context))">Xoá</MudButton>
                            </MudNavLink>
                        }
                        <MudNavLink>
                            <MudButton Disabled="@isDisable">Đổi mật khẩu</MudButton>
                        </MudNavLink>
                    </MudNavMenu>
                </ChildContent>
            </MudMenu>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    string roleName = "";
    List<UserFullInfo> userFullInfoList = new();
    List<ApplicationUser> applicationUsers = new();
    ClaimsPrincipal currentUserPrincipal = new();
    string userId = "";
    bool isDisable = false;

    protected override async Task OnInitializedAsync()
    {
        currentUserPrincipal = await userService.GetCurrentUserPrincipal();
        userId = currentUserPrincipal.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value ?? "";
        var user = await _userManager.FindByIdAsync(userId);
        var roles = await _userManager.GetRolesAsync(user);
        if (!roles.Contains("Admin"))
            isDisable = true;
        await GetData();
    }

    public async Task GetData() {
        applicationUsers = await _userManager.Users.ToListAsync();
        foreach (var applicationUser in applicationUsers)
        {
            userFullInfoList.Add(new UserFullInfo
                {
                    User = applicationUser,
                    Roles = (List<string>)await _userManager.GetRolesAsync(applicationUser) ?? new(),
                    Profile = await userProfileService.GetUserProfileById(applicationUser.Id) ?? new()
                });
        }
    }

    public async Task DeleteAccount(UserFullInfo fullInfo)
    {

        if(userId == fullInfo.User.Id)
        {
            CallSnackBar("Không thể xoá tài khoản của chính mình", Severity.Error, Variant.Filled);
            return;
        }
        var parameters = new DialogParameters
        {
            { "TextMess", "xoá tài khoản" }
        };
        var options = new DialogOptions();
        var dialog = DialogService.Show<Confirm>("Xác nhận", parameters, options);
        var result = await dialog.Result;
        if(!result?.Canceled ?? false)
        {
            await _userManager.DeleteAsync(fullInfo.User);
        }
        await GetData();
        return;
    }

    void CallSnackBar(string text, Severity severity, Variant variant)
    {
        Snackbar.Add(text , severity, config => {
            config.SnackbarVariant = variant;
            config.VisibleStateDuration = 1000;
        });
    }

    public bool isAdmin(UserFullInfo user)
    {
        if (user.User.Email == ("admin@gmail.com"))
            return true;
        return false;
    }

    public void NavigateToUserDetail(string id)
    {
        navigate.NavigateTo($"/Manage/UserManage/{id}");
    }

    public string RoleListString(List<string> Roles)
    {
        if (Roles.Count == 0)
            return "Không có quyền";
        return string.Join(", ", Roles);
    }

    public class UserFullInfo
    {
        public UserProfile Profile = new();
        public ApplicationUser User = new();
        public List<string> Roles = new();
    }
}
