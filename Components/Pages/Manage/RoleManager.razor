@page "/Manage/RoleManage"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using cuahangbanle.Components.Services
@using cuahangbanle.DBData.Models
@using cuahangbanle.Data

@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<ApplicationUser> _userManager
@inject IUserService userService
@inject IUserProfileService userProfileService

<PageTitle>Quản lý quyền</PageTitle>

<MudPaper Class="mb-4 py-2 px-4">
    <MudGrid Spacing="1">
        <MudItem xs="10" sm="8" md="6" lg="4">
            <MudTextField Label="Nhập tên quyền" ShrinkLabel Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="@roleName" />
        </MudItem>
        <MudItem Class="align-content-center mt-1" xs="2" sm="2" md="2" lg="2">
            <MudButton Class="text-nowrap" Variant="Variant.Filled" Color="Color.Primary" OnClick="@CreateRole">Thêm quyền</MudButton>
        </MudItem>
        <MudItem Class="d-none" xs="12" sm="8" md="6" lg="4">
            <MudButton FullWidth Variant="Variant.Filled" Color="Color.Error" OnClick="AddAdmin">Thêm người dùng hiện tại vào role Admin</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudPaper Class="py-2 px-4">
    <MudTable Items="@roleViewList" Dense Hover Filter="@FilterFunc" Bordered FixedHeader Striped>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Danh sách quyền</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Tên quyền</MudTh>
            <MudTh>Số lượng người dùng</MudTh>
            <MudTh>Quản lý</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Role.Name</MudTd>
            <MudTd>@context.CountUser.ToString()</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Disabled="@isDisabled(context)" Color="Color.Error" OnClick="@(() => DeleteRole(context))">Xoá</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    string roleName = "";
    string searchString = "";
    List<RoleView> roleViewList = new();

    protected override async Task OnInitializedAsync()
    {
        await GetRoleInfo();
    }

    public bool isDisabled(RoleView role)
    {
        if (role.Role.Name == "Admin")
            return true;
        return false;
    }

    public bool FilterFunc(RoleView role)
    {
        if (string.IsNullOrEmpty(searchString))
            return true;
        if (role.Role.Name?.ToUpper().Contains(searchString.ToUpper()) == true)
            return true;
        if (role.CountUser.ToString().ToUpper().Contains(searchString.ToUpper()) == true)
            return true;
        return false;
    }

    public async Task DeleteRole(RoleView role)
    {
        await _roleManager.DeleteAsync(role.Role);
        await GetRoleInfo();
        StateHasChanged();
    }

    public async Task<int> CountUserByRole(string role)
    {
        var users = await _userManager.GetUsersInRoleAsync(role);
        return users.Count;
    }

    private async Task CreateRole()
    {
        var result = await _roleManager.CreateAsync(new IdentityRole(roleName));
        await GetRoleInfo();
        StateHasChanged();
    }

    public async Task GetRoleInfo()
    {
        roleViewList = new();
        var roles = await _roleManager.Roles.ToListAsync();
        foreach (var role in roles)
        {
            roleViewList.Add(new RoleView
                {
                    Role = role,
                    CountUser = await CountUserByRole(role.Name ?? "")
                });
        }
    }

    private async Task AddAdmin()
    {
        var userPrincipal = await userService.GetCurrentUserPrincipal();
        var UserID = userPrincipal.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        var user = await _userManager.FindByIdAsync(UserID ?? "");
        if (user != null)
        {
            await _userManager.AddToRoleAsync(user, "Admin");
        }
    }

    public class RoleView
    {
        public IdentityRole Role = new();
        public int CountUser = 0;
    }
}
