@page "/DonHang/Danhsachdonhang"
@using Microsoft.AspNetCore.Identity
@using cuahangbanle.Components.Services
@using cuahangbanle.DBData.Models
@using cuahangbanle.Data
@using cuahangbanle.Data.Models

@inject AuthenticationStateProvider auth
@inject IDonhangService donhangService
@inject UserManager<ApplicationUser> _userManager
@inject NavigationManager _navi
@inject IUserProfileService userProfileService

<PageTitle>Danh sách đơn hàng</PageTitle>

<MudPaper>
    <MudTable Breakpoint="Breakpoint.None" Items="@donhangs" Filter="@filterTable" Virtualize>
        <ToolBarContent>
            <MudText>Danh sách đơn hàng</MudText>
            <MudSpacer />
            <MudTextField T="string" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Placeholder="Tìm kiếm" @bind-Value="searchText" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>STT</MudTh>
            <MudTh>Mã đơn hàng</MudTh>
            <MudTh>Kiểu đơn hàng</MudTh>
            <MudTh>Tiền hàng</MudTh>
            <MudTh>Tiền trả lại</MudTh>
            <MudTh>Người tạo</MudTh>
            <MudTh>Ngày tạo</MudTh>
            <MudTh>Người sửa</MudTh>
            <MudTh>Ngày sửa</MudTh>
            <MudTh>Quản lý</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@(donhangs.IndexOf(context) + 1)</MudTd>
            <MudTd>@context.Madonhang</MudTd>
            <MudTd>@kieudon(context)</MudTd>
            <MudTd>@(context.Tienhang.ToString() ?? "")</MudTd>
            <MudTd>@(context.Tientralai.ToString() ?? "")</MudTd>
            <MudTd>@(userProfiles.FirstOrDefault(p => p.UserId == context.Nguoitao.ToString())?.Hoten ?? "")</MudTd>
            <MudTd>@context.Ngaytao.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>@(userProfiles.FirstOrDefault(p => p.UserId == context.Nguoisua?.ToString())?.Hoten ?? "")</MudTd>
            <MudTd>@(context.Ngaysua?.ToString("dd/MM/yyyy") ?? "")</MudTd>
            <MudTd>
                <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudNavMenu>
                            <MudNavLink>
                                <MudButton FullWidth Disabled="@isDisable" OnClick="@(() => Delete(context))">Xoá</MudButton>
                            </MudNavLink>
                            <MudNavLink>
                                <MudButton FullWidth Disabled="@isDisable" OnClick="@(() => Update(context.Madonhang))">Sửa</MudButton>
                            </MudNavLink>
                        </MudNavMenu>
                    </ChildContent>
                </MudMenu>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

<MudTooltip Duration="1000" Delay="100" ShowOnHover Arrow Placement="Placement.Left" Text="Thêm ngành ngành">
    <MudIconButton OnClick="@Create" Disabled="@isDisable" Class="rounded-circle" Color="Color.Tertiary" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Size="Size.Large" />
</MudTooltip>

@code {
    bool isDisable = true;
    string searchText = "";
    List<Donhang> donhangs = new();
    List<UserProfile> userProfiles = new();

    protected override async Task OnInitializedAsync()
    {
        userProfiles = await userProfileService.GetAllProfile();
        donhangs = await donhangService.GetAllDonhang();
        var authState = await auth.GetAuthenticationStateAsync();
        var principal = authState.User;
        var userId = principal.FindFirst(p => p.Type.Contains("nameidentifier"))?.Value ?? "";
        var currentUser = await _userManager.FindByIdAsync(userId) ?? new();
        var roles = await _userManager.GetRolesAsync(currentUser);
        if (roles.Contains("Admin") || roles.Contains("Manager"))
        {
            isDisable = false;
        }
    }

    public string kieudon(Donhang donhang)
    {
        if (donhang.Kieudonhang)
        {
            return "Đơn xuất";
        }
        else
        {
            return "Đơn nhập";
        }
    }

    public async Task Delete(Donhang donvi)
    {
        await donhangService.RemoveDonhang(donvi);
        donhangs = await donhangService.GetAllDonhang();
    }

    public void Update(string id)
    {
        _navi.NavigateTo($"/DonHang/Danhsachdonhang/{id}");
    }

    public void Create()
    {
        _navi.NavigateTo($"/DonHang/Danhsachdonhang/{Guid.NewGuid().ToString()}");
    }

    private bool filterTable(Donhang donvi)
    {
        if (string.IsNullOrEmpty(searchText))
            return true;
        foreach (var property in donvi.GetType().GetProperties())
        {
            if (property.GetValue(donvi)?.ToString()?.Contains(searchText) ?? false)
            {
                return true;
            }
        }
        return false;
    }
}

<style>
    .mud-tooltip-root.mud-tooltip-inline {
        position: absolute;
        right: 5vw;
        top: 80vh;
        transform: scale(1.2);
    }
</style>

